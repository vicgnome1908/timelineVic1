/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Timeline: TimelineObject
      Attachment: AttachmentObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      AttachmentConnection: AttachmentConnectionObject
      AttachmentEdge: AttachmentEdgeObject
      AggregateAttachment: AggregateAttachmentObject
      TimelineConnection: TimelineConnectionObject
      TimelineEdge: TimelineEdgeObject
      AggregateTimeline: AggregateTimelineObject
      Action: ActionObject
      ActionConnection: ActionConnectionObject
      ActionEdge: ActionEdgeObject
      AggregateAction: AggregateActionObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      AttachmentSubscriptionPayload: AttachmentSubscriptionPayloadObject
      AttachmentPreviousValues: AttachmentPreviousValuesObject
      TimelineSubscriptionPayload: TimelineSubscriptionPayloadObject
      TimelinePreviousValues: TimelinePreviousValuesObject
      ActionSubscriptionPayload: ActionSubscriptionPayloadObject
      ActionPreviousValues: ActionPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Timeline: TimelineFieldDetails
      Attachment: AttachmentFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      AttachmentConnection: AttachmentConnectionFieldDetails
      AttachmentEdge: AttachmentEdgeFieldDetails
      AggregateAttachment: AggregateAttachmentFieldDetails
      TimelineConnection: TimelineConnectionFieldDetails
      TimelineEdge: TimelineEdgeFieldDetails
      AggregateTimeline: AggregateTimelineFieldDetails
      Action: ActionFieldDetails
      ActionConnection: ActionConnectionFieldDetails
      ActionEdge: ActionEdgeFieldDetails
      AggregateAction: AggregateActionFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      AttachmentSubscriptionPayload: AttachmentSubscriptionPayloadFieldDetails
      AttachmentPreviousValues: AttachmentPreviousValuesFieldDetails
      TimelineSubscriptionPayload: TimelineSubscriptionPayloadFieldDetails
      TimelinePreviousValues: TimelinePreviousValuesFieldDetails
      ActionSubscriptionPayload: ActionSubscriptionPayloadFieldDetails
      ActionPreviousValues: ActionPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      TimelineWhereInput: TimelineWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      AttachmentWhereInput: AttachmentWhereInputInputObject
      AttachmentWhereUniqueInput: AttachmentWhereUniqueInputInputObject
      TimelineWhereUniqueInput: TimelineWhereUniqueInputInputObject
      ActionWhereUniqueInput: ActionWhereUniqueInputInputObject
      ActionWhereInput: ActionWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      TimelineCreateManyWithoutAuthorInput: TimelineCreateManyWithoutAuthorInputInputObject
      TimelineCreateWithoutAuthorInput: TimelineCreateWithoutAuthorInputInputObject
      AttachmentCreateManyWithoutTimelineInput: AttachmentCreateManyWithoutTimelineInputInputObject
      AttachmentCreateWithoutTimelineInput: AttachmentCreateWithoutTimelineInputInputObject
      UserCreateManyWithoutMentionsInput: UserCreateManyWithoutMentionsInputInputObject
      UserCreateWithoutMentionsInput: UserCreateWithoutMentionsInputInputObject
      TimelineCreateManyWithoutMentionsInput: TimelineCreateManyWithoutMentionsInputInputObject
      TimelineCreateWithoutMentionsInput: TimelineCreateWithoutMentionsInputInputObject
      UserCreateOneWithoutTimelinesInput: UserCreateOneWithoutTimelinesInputInputObject
      UserCreateWithoutTimelinesInput: UserCreateWithoutTimelinesInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      TimelineUpdateManyWithoutAuthorInput: TimelineUpdateManyWithoutAuthorInputInputObject
      TimelineUpdateWithWhereUniqueWithoutAuthorInput: TimelineUpdateWithWhereUniqueWithoutAuthorInputInputObject
      TimelineUpdateWithoutAuthorDataInput: TimelineUpdateWithoutAuthorDataInputInputObject
      AttachmentUpdateManyWithoutTimelineInput: AttachmentUpdateManyWithoutTimelineInputInputObject
      AttachmentUpdateWithWhereUniqueWithoutTimelineInput: AttachmentUpdateWithWhereUniqueWithoutTimelineInputInputObject
      AttachmentUpdateWithoutTimelineDataInput: AttachmentUpdateWithoutTimelineDataInputInputObject
      AttachmentUpsertWithWhereUniqueWithoutTimelineInput: AttachmentUpsertWithWhereUniqueWithoutTimelineInputInputObject
      AttachmentScalarWhereInput: AttachmentScalarWhereInputInputObject
      AttachmentUpdateManyWithWhereNestedInput: AttachmentUpdateManyWithWhereNestedInputInputObject
      AttachmentUpdateManyDataInput: AttachmentUpdateManyDataInputInputObject
      UserUpdateManyWithoutMentionsInput: UserUpdateManyWithoutMentionsInputInputObject
      UserUpdateWithWhereUniqueWithoutMentionsInput: UserUpdateWithWhereUniqueWithoutMentionsInputInputObject
      UserUpdateWithoutMentionsDataInput: UserUpdateWithoutMentionsDataInputInputObject
      UserUpsertWithWhereUniqueWithoutMentionsInput: UserUpsertWithWhereUniqueWithoutMentionsInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      TimelineUpsertWithWhereUniqueWithoutAuthorInput: TimelineUpsertWithWhereUniqueWithoutAuthorInputInputObject
      TimelineScalarWhereInput: TimelineScalarWhereInputInputObject
      TimelineUpdateManyWithWhereNestedInput: TimelineUpdateManyWithWhereNestedInputInputObject
      TimelineUpdateManyDataInput: TimelineUpdateManyDataInputInputObject
      TimelineUpdateManyWithoutMentionsInput: TimelineUpdateManyWithoutMentionsInputInputObject
      TimelineUpdateWithWhereUniqueWithoutMentionsInput: TimelineUpdateWithWhereUniqueWithoutMentionsInputInputObject
      TimelineUpdateWithoutMentionsDataInput: TimelineUpdateWithoutMentionsDataInputInputObject
      UserUpdateOneRequiredWithoutTimelinesInput: UserUpdateOneRequiredWithoutTimelinesInputInputObject
      UserUpdateWithoutTimelinesDataInput: UserUpdateWithoutTimelinesDataInputInputObject
      UserUpsertWithoutTimelinesInput: UserUpsertWithoutTimelinesInputInputObject
      TimelineUpsertWithWhereUniqueWithoutMentionsInput: TimelineUpsertWithWhereUniqueWithoutMentionsInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      AttachmentCreateInput: AttachmentCreateInputInputObject
      TimelineCreateOneWithoutAttachmentsInput: TimelineCreateOneWithoutAttachmentsInputInputObject
      TimelineCreateWithoutAttachmentsInput: TimelineCreateWithoutAttachmentsInputInputObject
      AttachmentUpdateInput: AttachmentUpdateInputInputObject
      TimelineUpdateOneRequiredWithoutAttachmentsInput: TimelineUpdateOneRequiredWithoutAttachmentsInputInputObject
      TimelineUpdateWithoutAttachmentsDataInput: TimelineUpdateWithoutAttachmentsDataInputInputObject
      TimelineUpsertWithoutAttachmentsInput: TimelineUpsertWithoutAttachmentsInputInputObject
      AttachmentUpdateManyMutationInput: AttachmentUpdateManyMutationInputInputObject
      TimelineCreateInput: TimelineCreateInputInputObject
      TimelineUpdateInput: TimelineUpdateInputInputObject
      TimelineUpdateManyMutationInput: TimelineUpdateManyMutationInputInputObject
      ActionCreateInput: ActionCreateInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      TimelineCreateOneInput: TimelineCreateOneInputInputObject
      ActionCreateOneInput: ActionCreateOneInputInputObject
      ActionUpdateInput: ActionUpdateInputInputObject
      UserUpdateOneRequiredInput: UserUpdateOneRequiredInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      TimelineUpdateOneRequiredInput: TimelineUpdateOneRequiredInputInputObject
      TimelineUpdateDataInput: TimelineUpdateDataInputInputObject
      TimelineUpsertNestedInput: TimelineUpsertNestedInputInputObject
      ActionUpdateOneInput: ActionUpdateOneInputInputObject
      ActionUpdateDataInput: ActionUpdateDataInputInputObject
      ActionUpsertNestedInput: ActionUpsertNestedInputInputObject
      ActionUpdateManyMutationInput: ActionUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      AttachmentSubscriptionWhereInput: AttachmentSubscriptionWhereInputInputObject
      TimelineSubscriptionWhereInput: TimelineSubscriptionWhereInputInputObject
      ActionSubscriptionWhereInput: ActionSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    AttachmentType: AttachmentTypeValues,
    TimelineOrderByInput: TimelineOrderByInputValues,
    AttachmentOrderByInput: AttachmentOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    ActionType: ActionTypeValues,
    ActionOrderByInput: ActionOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'attachment', args?: QueryAttachmentArgs[] | false, alias?: string  } 
  | { name: 'attachments', args?: QueryAttachmentsArgs[] | false, alias?: string  } 
  | { name: 'attachmentsConnection', args?: QueryAttachmentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'timeline', args?: QueryTimelineArgs[] | false, alias?: string  } 
  | { name: 'timelines', args?: QueryTimelinesArgs[] | false, alias?: string  } 
  | { name: 'timelinesConnection', args?: QueryTimelinesConnectionArgs[] | false, alias?: string  } 
  | { name: 'action', args?: QueryActionArgs[] | false, alias?: string  } 
  | { name: 'actions', args?: QueryActionsArgs[] | false, alias?: string  } 
  | { name: 'actionsConnection', args?: QueryActionsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'attachment'
  | 'attachments'
  | 'attachmentsConnection'
  | 'timeline'
  | 'timelines'
  | 'timelinesConnection'
  | 'action'
  | 'actions'
  | 'actionsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAttachmentArgs =
  | 'where'
type QueryAttachmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAttachmentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTimelineArgs =
  | 'where'
type QueryTimelinesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTimelinesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryActionArgs =
  | 'where'
type QueryActionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryActionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  attachment: {
    type: 'Attachment'
    args: Record<QueryAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AttachmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  attachments: {
    type: 'Attachment'
    args: Record<QueryAttachmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AttachmentWhereInput | null, orderBy?: prisma.AttachmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment[]> | prisma.Attachment[]
  }
  attachmentsConnection: {
    type: 'AttachmentConnection'
    args: Record<QueryAttachmentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AttachmentWhereInput | null, orderBy?: prisma.AttachmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttachmentConnection> | prisma.AttachmentConnection
  }
  timeline: {
    type: 'Timeline'
    args: Record<QueryTimelineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TimelineWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline | null> | prisma.Timeline | null
  }
  timelines: {
    type: 'Timeline'
    args: Record<QueryTimelinesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TimelineWhereInput | null, orderBy?: prisma.TimelineOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline[]> | prisma.Timeline[]
  }
  timelinesConnection: {
    type: 'TimelineConnection'
    args: Record<QueryTimelinesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TimelineWhereInput | null, orderBy?: prisma.TimelineOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimelineConnection> | prisma.TimelineConnection
  }
  action: {
    type: 'Action'
    args: Record<QueryActionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ActionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Action | null> | prisma.Action | null
  }
  actions: {
    type: 'Action'
    args: Record<QueryActionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ActionWhereInput | null, orderBy?: prisma.ActionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Action[]> | prisma.Action[]
  }
  actionsConnection: {
    type: 'ActionConnection'
    args: Record<QueryActionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ActionWhereInput | null, orderBy?: prisma.ActionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActionConnection> | prisma.ActionConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'timelines', args?: UserTimelinesArgs[] | false, alias?: string  } 
  | { name: 'mentions', args?: UserMentionsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'username'
  | 'email'
  | 'password'
  | 'timelines'
  | 'mentions'
  | 'createdAt'


type UserTimelinesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserMentionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  timelines: {
    type: 'Timeline'
    args: Record<UserTimelinesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: TimelineWhereInput | null, orderBy?: prisma.TimelineOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline[]> | prisma.Timeline[]
  }
  mentions: {
    type: 'Timeline'
    args: Record<UserMentionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: TimelineWhereInput | null, orderBy?: prisma.TimelineOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline[]> | prisma.Timeline[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Timeline

type TimelineObject =
  | TimelineFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'isPublished', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'attachments', args?: TimelineAttachmentsArgs[] | false, alias?: string  } 
  | { name: 'mentions', args?: TimelineMentionsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TimelineFields =
  | 'id'
  | 'title'
  | 'content'
  | 'isPublished'
  | 'author'
  | 'attachments'
  | 'mentions'
  | 'createdAt'
  | 'updatedAt'


type TimelineAttachmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type TimelineMentionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TimelineFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPublished: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Timeline">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  attachments: {
    type: 'Attachment'
    args: Record<TimelineAttachmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Timeline">,
      args: { where?: AttachmentWhereInput | null, orderBy?: prisma.AttachmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment[]> | prisma.Attachment[]
  }
  mentions: {
    type: 'User'
    args: Record<TimelineMentionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Timeline">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Attachment

type AttachmentObject =
  | AttachmentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'timeline', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type AttachmentFields =
  | 'id'
  | 'type'
  | 'url'
  | 'timeline'
  | 'createdAt'



  

export interface AttachmentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'AttachmentType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Attachment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttachmentType> | prisma.AttachmentType
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  timeline: {
    type: 'Timeline'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Attachment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline> | prisma.Timeline
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AttachmentConnection

type AttachmentConnectionObject =
  | AttachmentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AttachmentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AttachmentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AttachmentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttachmentEdge[]> | prisma.AttachmentEdge[]
  }
  aggregate: {
    type: 'AggregateAttachment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAttachment> | prisma.AggregateAttachment
  }
}
  

// Types for AttachmentEdge

type AttachmentEdgeObject =
  | AttachmentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AttachmentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AttachmentEdgeFieldDetails {
  node: {
    type: 'Attachment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment> | prisma.Attachment
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAttachment

type AggregateAttachmentObject =
  | AggregateAttachmentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAttachmentFields =
  | 'count'



  

export interface AggregateAttachmentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TimelineConnection

type TimelineConnectionObject =
  | TimelineConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TimelineConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TimelineConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimelineConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TimelineEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TimelineConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimelineEdge[]> | prisma.TimelineEdge[]
  }
  aggregate: {
    type: 'AggregateTimeline'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimelineConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTimeline> | prisma.AggregateTimeline
  }
}
  

// Types for TimelineEdge

type TimelineEdgeObject =
  | TimelineEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TimelineEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TimelineEdgeFieldDetails {
  node: {
    type: 'Timeline'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimelineEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline> | prisma.Timeline
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTimeline

type AggregateTimelineObject =
  | AggregateTimelineFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTimelineFields =
  | 'count'



  

export interface AggregateTimelineFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Action

type ActionObject =
  | ActionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'timeline', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type ActionFields =
  | 'id'
  | 'author'
  | 'timeline'
  | 'comment'
  | 'type'
  | 'content'
  | 'createdAt'



  

export interface ActionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Action">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  timeline: {
    type: 'Timeline'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Action">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline> | prisma.Timeline
  }
  comment: {
    type: 'Action'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Action">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Action | null> | prisma.Action | null
  }
  type: {
    type: 'ActionType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Action">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActionType> | prisma.ActionType
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ActionConnection

type ActionConnectionObject =
  | ActionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ActionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ActionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ActionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ActionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActionEdge[]> | prisma.ActionEdge[]
  }
  aggregate: {
    type: 'AggregateAction'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAction> | prisma.AggregateAction
  }
}
  

// Types for ActionEdge

type ActionEdgeObject =
  | ActionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ActionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ActionEdgeFieldDetails {
  node: {
    type: 'Action'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Action> | prisma.Action
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAction

type AggregateActionObject =
  | AggregateActionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateActionFields =
  | 'count'



  

export interface AggregateActionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createAttachment', args?: MutationCreateAttachmentArgs[] | false, alias?: string  } 
  | { name: 'updateAttachment', args?: MutationUpdateAttachmentArgs[] | false, alias?: string  } 
  | { name: 'updateManyAttachments', args?: MutationUpdateManyAttachmentsArgs[] | false, alias?: string  } 
  | { name: 'upsertAttachment', args?: MutationUpsertAttachmentArgs[] | false, alias?: string  } 
  | { name: 'deleteAttachment', args?: MutationDeleteAttachmentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAttachments', args?: MutationDeleteManyAttachmentsArgs[] | false, alias?: string  } 
  | { name: 'createTimeline', args?: MutationCreateTimelineArgs[] | false, alias?: string  } 
  | { name: 'updateTimeline', args?: MutationUpdateTimelineArgs[] | false, alias?: string  } 
  | { name: 'updateManyTimelines', args?: MutationUpdateManyTimelinesArgs[] | false, alias?: string  } 
  | { name: 'upsertTimeline', args?: MutationUpsertTimelineArgs[] | false, alias?: string  } 
  | { name: 'deleteTimeline', args?: MutationDeleteTimelineArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTimelines', args?: MutationDeleteManyTimelinesArgs[] | false, alias?: string  } 
  | { name: 'createAction', args?: MutationCreateActionArgs[] | false, alias?: string  } 
  | { name: 'updateAction', args?: MutationUpdateActionArgs[] | false, alias?: string  } 
  | { name: 'updateManyActions', args?: MutationUpdateManyActionsArgs[] | false, alias?: string  } 
  | { name: 'upsertAction', args?: MutationUpsertActionArgs[] | false, alias?: string  } 
  | { name: 'deleteAction', args?: MutationDeleteActionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyActions', args?: MutationDeleteManyActionsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createAttachment'
  | 'updateAttachment'
  | 'updateManyAttachments'
  | 'upsertAttachment'
  | 'deleteAttachment'
  | 'deleteManyAttachments'
  | 'createTimeline'
  | 'updateTimeline'
  | 'updateManyTimelines'
  | 'upsertTimeline'
  | 'deleteTimeline'
  | 'deleteManyTimelines'
  | 'createAction'
  | 'updateAction'
  | 'updateManyActions'
  | 'upsertAction'
  | 'deleteAction'
  | 'deleteManyActions'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateAttachmentArgs =
  | 'data'
type MutationUpdateAttachmentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAttachmentsArgs =
  | 'data'
  | 'where'
type MutationUpsertAttachmentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAttachmentArgs =
  | 'where'
type MutationDeleteManyAttachmentsArgs =
  | 'where'
type MutationCreateTimelineArgs =
  | 'data'
type MutationUpdateTimelineArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTimelinesArgs =
  | 'data'
  | 'where'
type MutationUpsertTimelineArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTimelineArgs =
  | 'where'
type MutationDeleteManyTimelinesArgs =
  | 'where'
type MutationCreateActionArgs =
  | 'data'
type MutationUpdateActionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyActionsArgs =
  | 'data'
  | 'where'
type MutationUpsertActionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteActionArgs =
  | 'where'
type MutationDeleteManyActionsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAttachment: {
    type: 'Attachment'
    args: Record<MutationCreateAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttachmentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment> | prisma.Attachment
  }
  updateAttachment: {
    type: 'Attachment'
    args: Record<MutationUpdateAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttachmentUpdateInput, where: AttachmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  updateManyAttachments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAttachmentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttachmentUpdateManyMutationInput, where?: AttachmentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAttachment: {
    type: 'Attachment'
    args: Record<MutationUpsertAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AttachmentWhereUniqueInput, create: AttachmentCreateInput, update: AttachmentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment> | prisma.Attachment
  }
  deleteAttachment: {
    type: 'Attachment'
    args: Record<MutationDeleteAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AttachmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  deleteManyAttachments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAttachmentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AttachmentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTimeline: {
    type: 'Timeline'
    args: Record<MutationCreateTimelineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TimelineCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline> | prisma.Timeline
  }
  updateTimeline: {
    type: 'Timeline'
    args: Record<MutationUpdateTimelineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TimelineUpdateInput, where: TimelineWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline | null> | prisma.Timeline | null
  }
  updateManyTimelines: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTimelinesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TimelineUpdateManyMutationInput, where?: TimelineWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTimeline: {
    type: 'Timeline'
    args: Record<MutationUpsertTimelineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TimelineWhereUniqueInput, create: TimelineCreateInput, update: TimelineUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline> | prisma.Timeline
  }
  deleteTimeline: {
    type: 'Timeline'
    args: Record<MutationDeleteTimelineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TimelineWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline | null> | prisma.Timeline | null
  }
  deleteManyTimelines: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTimelinesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TimelineWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAction: {
    type: 'Action'
    args: Record<MutationCreateActionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Action> | prisma.Action
  }
  updateAction: {
    type: 'Action'
    args: Record<MutationUpdateActionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActionUpdateInput, where: ActionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Action | null> | prisma.Action | null
  }
  updateManyActions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyActionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActionUpdateManyMutationInput, where?: ActionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAction: {
    type: 'Action'
    args: Record<MutationUpsertActionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ActionWhereUniqueInput, create: ActionCreateInput, update: ActionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Action> | prisma.Action
  }
  deleteAction: {
    type: 'Action'
    args: Record<MutationDeleteActionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ActionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Action | null> | prisma.Action | null
  }
  deleteManyActions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyActionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ActionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'attachment', args?: SubscriptionAttachmentArgs[] | false, alias?: string  } 
  | { name: 'timeline', args?: SubscriptionTimelineArgs[] | false, alias?: string  } 
  | { name: 'action', args?: SubscriptionActionArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'attachment'
  | 'timeline'
  | 'action'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionAttachmentArgs =
  | 'where'
type SubscriptionTimelineArgs =
  | 'where'
type SubscriptionActionArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  attachment: {
    type: 'AttachmentSubscriptionPayload'
    args: Record<SubscriptionAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AttachmentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttachmentSubscriptionPayload | null> | prisma.AttachmentSubscriptionPayload | null
  }
  timeline: {
    type: 'TimelineSubscriptionPayload'
    args: Record<SubscriptionTimelineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TimelineSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimelineSubscriptionPayload | null> | prisma.TimelineSubscriptionPayload | null
  }
  action: {
    type: 'ActionSubscriptionPayload'
    args: Record<SubscriptionActionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ActionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActionSubscriptionPayload | null> | prisma.ActionSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'username'
  | 'email'
  | 'password'
  | 'createdAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AttachmentSubscriptionPayload

type AttachmentSubscriptionPayloadObject =
  | AttachmentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AttachmentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AttachmentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Attachment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AttachmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AttachmentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AttachmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttachmentPreviousValues | null> | prisma.AttachmentPreviousValues | null
  }
}
  

// Types for AttachmentPreviousValues

type AttachmentPreviousValuesObject =
  | AttachmentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type AttachmentPreviousValuesFields =
  | 'id'
  | 'type'
  | 'url'
  | 'createdAt'



  

export interface AttachmentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'AttachmentType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttachmentType> | prisma.AttachmentType
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TimelineSubscriptionPayload

type TimelineSubscriptionPayloadObject =
  | TimelineSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TimelineSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TimelineSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimelineSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Timeline'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimelineSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Timeline | null> | prisma.Timeline | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TimelinePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimelineSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimelinePreviousValues | null> | prisma.TimelinePreviousValues | null
  }
}
  

// Types for TimelinePreviousValues

type TimelinePreviousValuesObject =
  | TimelinePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'isPublished', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TimelinePreviousValuesFields =
  | 'id'
  | 'title'
  | 'content'
  | 'isPublished'
  | 'createdAt'
  | 'updatedAt'



  

export interface TimelinePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPublished: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ActionSubscriptionPayload

type ActionSubscriptionPayloadObject =
  | ActionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ActionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ActionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Action'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ActionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Action | null> | prisma.Action | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ActionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ActionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActionPreviousValues | null> | prisma.ActionPreviousValues | null
  }
}
  

// Types for ActionPreviousValues

type ActionPreviousValuesObject =
  | ActionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type ActionPreviousValuesFields =
  | 'id'
  | 'type'
  | 'content'
  | 'createdAt'



  

export interface ActionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'ActionType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActionPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActionType> | prisma.ActionType
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface TimelineWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  isPublished?: boolean | null
  isPublished_not?: boolean | null
  author?: UserWhereInput | null
  attachments_every?: AttachmentWhereInput | null
  attachments_some?: AttachmentWhereInput | null
  attachments_none?: AttachmentWhereInput | null
  mentions_every?: UserWhereInput | null
  mentions_some?: UserWhereInput | null
  mentions_none?: UserWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TimelineWhereInput[]
  OR?: TimelineWhereInput[]
  NOT?: TimelineWhereInput[]
}
export type TimelineWhereInputInputObject =
  | Extract<keyof TimelineWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'isPublished_not', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'attachments_every', alias?: string  } 
  | { name: 'attachments_some', alias?: string  } 
  | { name: 'attachments_none', alias?: string  } 
  | { name: 'mentions_every', alias?: string  } 
  | { name: 'mentions_some', alias?: string  } 
  | { name: 'mentions_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  timelines_every?: TimelineWhereInput | null
  timelines_some?: TimelineWhereInput | null
  timelines_none?: TimelineWhereInput | null
  mentions_every?: TimelineWhereInput | null
  mentions_some?: TimelineWhereInput | null
  mentions_none?: TimelineWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'timelines_every', alias?: string  } 
  | { name: 'timelines_some', alias?: string  } 
  | { name: 'timelines_none', alias?: string  } 
  | { name: 'mentions_every', alias?: string  } 
  | { name: 'mentions_some', alias?: string  } 
  | { name: 'mentions_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttachmentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: prisma.AttachmentType | null
  type_not?: prisma.AttachmentType | null
  type_in?: prisma.AttachmentType[]
  type_not_in?: prisma.AttachmentType[]
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  timeline?: TimelineWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: AttachmentWhereInput[]
  OR?: AttachmentWhereInput[]
  NOT?: AttachmentWhereInput[]
}
export type AttachmentWhereInputInputObject =
  | Extract<keyof AttachmentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'timeline', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttachmentWhereUniqueInput {
  id?: string | null
}
export type AttachmentWhereUniqueInputInputObject =
  | Extract<keyof AttachmentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TimelineWhereUniqueInput {
  id?: string | null
}
export type TimelineWhereUniqueInputInputObject =
  | Extract<keyof TimelineWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ActionWhereUniqueInput {
  id?: string | null
}
export type ActionWhereUniqueInputInputObject =
  | Extract<keyof ActionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ActionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  author?: UserWhereInput | null
  timeline?: TimelineWhereInput | null
  comment?: ActionWhereInput | null
  type?: prisma.ActionType | null
  type_not?: prisma.ActionType | null
  type_in?: prisma.ActionType[]
  type_not_in?: prisma.ActionType[]
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: ActionWhereInput[]
  OR?: ActionWhereInput[]
  NOT?: ActionWhereInput[]
}
export type ActionWhereInputInputObject =
  | Extract<keyof ActionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'timeline', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  username?: string
  email?: string
  password?: string
  timelines?: TimelineCreateManyWithoutAuthorInput | null
  mentions?: TimelineCreateManyWithoutMentionsInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'timelines', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface TimelineCreateManyWithoutAuthorInput {
  create?: TimelineCreateWithoutAuthorInput[]
  connect?: TimelineWhereUniqueInput[]
}
export type TimelineCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof TimelineCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimelineCreateWithoutAuthorInput {
  id?: string | null
  title?: string
  content?: string
  isPublished?: boolean | null
  attachments?: AttachmentCreateManyWithoutTimelineInput | null
  mentions?: UserCreateManyWithoutMentionsInput | null
}
export type TimelineCreateWithoutAuthorInputInputObject =
  | Extract<keyof TimelineCreateWithoutAuthorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface AttachmentCreateManyWithoutTimelineInput {
  create?: AttachmentCreateWithoutTimelineInput[]
  connect?: AttachmentWhereUniqueInput[]
}
export type AttachmentCreateManyWithoutTimelineInputInputObject =
  | Extract<keyof AttachmentCreateManyWithoutTimelineInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AttachmentCreateWithoutTimelineInput {
  id?: string | null
  type?: prisma.AttachmentType
  url?: string
}
export type AttachmentCreateWithoutTimelineInputInputObject =
  | Extract<keyof AttachmentCreateWithoutTimelineInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface UserCreateManyWithoutMentionsInput {
  create?: UserCreateWithoutMentionsInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutMentionsInputInputObject =
  | Extract<keyof UserCreateManyWithoutMentionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutMentionsInput {
  id?: string | null
  username?: string
  email?: string
  password?: string
  timelines?: TimelineCreateManyWithoutAuthorInput | null
}
export type UserCreateWithoutMentionsInputInputObject =
  | Extract<keyof UserCreateWithoutMentionsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'timelines', alias?: string  } 
  
export interface TimelineCreateManyWithoutMentionsInput {
  create?: TimelineCreateWithoutMentionsInput[]
  connect?: TimelineWhereUniqueInput[]
}
export type TimelineCreateManyWithoutMentionsInputInputObject =
  | Extract<keyof TimelineCreateManyWithoutMentionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimelineCreateWithoutMentionsInput {
  id?: string | null
  title?: string
  content?: string
  isPublished?: boolean | null
  author?: UserCreateOneWithoutTimelinesInput
  attachments?: AttachmentCreateManyWithoutTimelineInput | null
}
export type TimelineCreateWithoutMentionsInputInputObject =
  | Extract<keyof TimelineCreateWithoutMentionsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  
export interface UserCreateOneWithoutTimelinesInput {
  create?: UserCreateWithoutTimelinesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutTimelinesInputInputObject =
  | Extract<keyof UserCreateOneWithoutTimelinesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutTimelinesInput {
  id?: string | null
  username?: string
  email?: string
  password?: string
  mentions?: TimelineCreateManyWithoutMentionsInput | null
}
export type UserCreateWithoutTimelinesInputInputObject =
  | Extract<keyof UserCreateWithoutTimelinesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface UserUpdateInput {
  username?: string | null
  email?: string | null
  password?: string | null
  timelines?: TimelineUpdateManyWithoutAuthorInput | null
  mentions?: TimelineUpdateManyWithoutMentionsInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'timelines', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface TimelineUpdateManyWithoutAuthorInput {
  create?: TimelineCreateWithoutAuthorInput[]
  delete?: TimelineWhereUniqueInput[]
  connect?: TimelineWhereUniqueInput[]
  set?: TimelineWhereUniqueInput[]
  disconnect?: TimelineWhereUniqueInput[]
  update?: TimelineUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: TimelineUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: TimelineScalarWhereInput[]
  updateMany?: TimelineUpdateManyWithWhereNestedInput[]
}
export type TimelineUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof TimelineUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TimelineUpdateWithWhereUniqueWithoutAuthorInput {
  where?: TimelineWhereUniqueInput
  data?: TimelineUpdateWithoutAuthorDataInput
}
export type TimelineUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof TimelineUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TimelineUpdateWithoutAuthorDataInput {
  title?: string | null
  content?: string | null
  isPublished?: boolean | null
  attachments?: AttachmentUpdateManyWithoutTimelineInput | null
  mentions?: UserUpdateManyWithoutMentionsInput | null
}
export type TimelineUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof TimelineUpdateWithoutAuthorDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface AttachmentUpdateManyWithoutTimelineInput {
  create?: AttachmentCreateWithoutTimelineInput[]
  delete?: AttachmentWhereUniqueInput[]
  connect?: AttachmentWhereUniqueInput[]
  set?: AttachmentWhereUniqueInput[]
  disconnect?: AttachmentWhereUniqueInput[]
  update?: AttachmentUpdateWithWhereUniqueWithoutTimelineInput[]
  upsert?: AttachmentUpsertWithWhereUniqueWithoutTimelineInput[]
  deleteMany?: AttachmentScalarWhereInput[]
  updateMany?: AttachmentUpdateManyWithWhereNestedInput[]
}
export type AttachmentUpdateManyWithoutTimelineInputInputObject =
  | Extract<keyof AttachmentUpdateManyWithoutTimelineInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AttachmentUpdateWithWhereUniqueWithoutTimelineInput {
  where?: AttachmentWhereUniqueInput
  data?: AttachmentUpdateWithoutTimelineDataInput
}
export type AttachmentUpdateWithWhereUniqueWithoutTimelineInputInputObject =
  | Extract<keyof AttachmentUpdateWithWhereUniqueWithoutTimelineInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AttachmentUpdateWithoutTimelineDataInput {
  type?: prisma.AttachmentType | null
  url?: string | null
}
export type AttachmentUpdateWithoutTimelineDataInputInputObject =
  | Extract<keyof AttachmentUpdateWithoutTimelineDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface AttachmentUpsertWithWhereUniqueWithoutTimelineInput {
  where?: AttachmentWhereUniqueInput
  update?: AttachmentUpdateWithoutTimelineDataInput
  create?: AttachmentCreateWithoutTimelineInput
}
export type AttachmentUpsertWithWhereUniqueWithoutTimelineInputInputObject =
  | Extract<keyof AttachmentUpsertWithWhereUniqueWithoutTimelineInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AttachmentScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: prisma.AttachmentType | null
  type_not?: prisma.AttachmentType | null
  type_in?: prisma.AttachmentType[]
  type_not_in?: prisma.AttachmentType[]
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: AttachmentScalarWhereInput[]
  OR?: AttachmentScalarWhereInput[]
  NOT?: AttachmentScalarWhereInput[]
}
export type AttachmentScalarWhereInputInputObject =
  | Extract<keyof AttachmentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttachmentUpdateManyWithWhereNestedInput {
  where?: AttachmentScalarWhereInput
  data?: AttachmentUpdateManyDataInput
}
export type AttachmentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AttachmentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AttachmentUpdateManyDataInput {
  type?: prisma.AttachmentType | null
  url?: string | null
}
export type AttachmentUpdateManyDataInputInputObject =
  | Extract<keyof AttachmentUpdateManyDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface UserUpdateManyWithoutMentionsInput {
  create?: UserCreateWithoutMentionsInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutMentionsInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutMentionsInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutMentionsInputInputObject =
  | Extract<keyof UserUpdateManyWithoutMentionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutMentionsInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutMentionsDataInput
}
export type UserUpdateWithWhereUniqueWithoutMentionsInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutMentionsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutMentionsDataInput {
  username?: string | null
  email?: string | null
  password?: string | null
  timelines?: TimelineUpdateManyWithoutAuthorInput | null
}
export type UserUpdateWithoutMentionsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutMentionsDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'timelines', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutMentionsInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutMentionsDataInput
  create?: UserCreateWithoutMentionsInput
}
export type UserUpsertWithWhereUniqueWithoutMentionsInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutMentionsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  username?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface TimelineUpsertWithWhereUniqueWithoutAuthorInput {
  where?: TimelineWhereUniqueInput
  update?: TimelineUpdateWithoutAuthorDataInput
  create?: TimelineCreateWithoutAuthorInput
}
export type TimelineUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof TimelineUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TimelineScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  isPublished?: boolean | null
  isPublished_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TimelineScalarWhereInput[]
  OR?: TimelineScalarWhereInput[]
  NOT?: TimelineScalarWhereInput[]
}
export type TimelineScalarWhereInputInputObject =
  | Extract<keyof TimelineScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'isPublished_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TimelineUpdateManyWithWhereNestedInput {
  where?: TimelineScalarWhereInput
  data?: TimelineUpdateManyDataInput
}
export type TimelineUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TimelineUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TimelineUpdateManyDataInput {
  title?: string | null
  content?: string | null
  isPublished?: boolean | null
}
export type TimelineUpdateManyDataInputInputObject =
  | Extract<keyof TimelineUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  
export interface TimelineUpdateManyWithoutMentionsInput {
  create?: TimelineCreateWithoutMentionsInput[]
  delete?: TimelineWhereUniqueInput[]
  connect?: TimelineWhereUniqueInput[]
  set?: TimelineWhereUniqueInput[]
  disconnect?: TimelineWhereUniqueInput[]
  update?: TimelineUpdateWithWhereUniqueWithoutMentionsInput[]
  upsert?: TimelineUpsertWithWhereUniqueWithoutMentionsInput[]
  deleteMany?: TimelineScalarWhereInput[]
  updateMany?: TimelineUpdateManyWithWhereNestedInput[]
}
export type TimelineUpdateManyWithoutMentionsInputInputObject =
  | Extract<keyof TimelineUpdateManyWithoutMentionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TimelineUpdateWithWhereUniqueWithoutMentionsInput {
  where?: TimelineWhereUniqueInput
  data?: TimelineUpdateWithoutMentionsDataInput
}
export type TimelineUpdateWithWhereUniqueWithoutMentionsInputInputObject =
  | Extract<keyof TimelineUpdateWithWhereUniqueWithoutMentionsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TimelineUpdateWithoutMentionsDataInput {
  title?: string | null
  content?: string | null
  isPublished?: boolean | null
  author?: UserUpdateOneRequiredWithoutTimelinesInput | null
  attachments?: AttachmentUpdateManyWithoutTimelineInput | null
}
export type TimelineUpdateWithoutMentionsDataInputInputObject =
  | Extract<keyof TimelineUpdateWithoutMentionsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutTimelinesInput {
  create?: UserCreateWithoutTimelinesInput | null
  update?: UserUpdateWithoutTimelinesDataInput | null
  upsert?: UserUpsertWithoutTimelinesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutTimelinesInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutTimelinesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutTimelinesDataInput {
  username?: string | null
  email?: string | null
  password?: string | null
  mentions?: TimelineUpdateManyWithoutMentionsInput | null
}
export type UserUpdateWithoutTimelinesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutTimelinesDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface UserUpsertWithoutTimelinesInput {
  update?: UserUpdateWithoutTimelinesDataInput
  create?: UserCreateWithoutTimelinesInput
}
export type UserUpsertWithoutTimelinesInputInputObject =
  | Extract<keyof UserUpsertWithoutTimelinesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TimelineUpsertWithWhereUniqueWithoutMentionsInput {
  where?: TimelineWhereUniqueInput
  update?: TimelineUpdateWithoutMentionsDataInput
  create?: TimelineCreateWithoutMentionsInput
}
export type TimelineUpsertWithWhereUniqueWithoutMentionsInputInputObject =
  | Extract<keyof TimelineUpsertWithWhereUniqueWithoutMentionsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  username?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface AttachmentCreateInput {
  id?: string | null
  type?: prisma.AttachmentType
  url?: string
  timeline?: TimelineCreateOneWithoutAttachmentsInput
}
export type AttachmentCreateInputInputObject =
  | Extract<keyof AttachmentCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'timeline', alias?: string  } 
  
export interface TimelineCreateOneWithoutAttachmentsInput {
  create?: TimelineCreateWithoutAttachmentsInput | null
  connect?: TimelineWhereUniqueInput | null
}
export type TimelineCreateOneWithoutAttachmentsInputInputObject =
  | Extract<keyof TimelineCreateOneWithoutAttachmentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimelineCreateWithoutAttachmentsInput {
  id?: string | null
  title?: string
  content?: string
  isPublished?: boolean | null
  author?: UserCreateOneWithoutTimelinesInput
  mentions?: UserCreateManyWithoutMentionsInput | null
}
export type TimelineCreateWithoutAttachmentsInputInputObject =
  | Extract<keyof TimelineCreateWithoutAttachmentsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface AttachmentUpdateInput {
  type?: prisma.AttachmentType | null
  url?: string | null
  timeline?: TimelineUpdateOneRequiredWithoutAttachmentsInput | null
}
export type AttachmentUpdateInputInputObject =
  | Extract<keyof AttachmentUpdateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'timeline', alias?: string  } 
  
export interface TimelineUpdateOneRequiredWithoutAttachmentsInput {
  create?: TimelineCreateWithoutAttachmentsInput | null
  update?: TimelineUpdateWithoutAttachmentsDataInput | null
  upsert?: TimelineUpsertWithoutAttachmentsInput | null
  connect?: TimelineWhereUniqueInput | null
}
export type TimelineUpdateOneRequiredWithoutAttachmentsInputInputObject =
  | Extract<keyof TimelineUpdateOneRequiredWithoutAttachmentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimelineUpdateWithoutAttachmentsDataInput {
  title?: string | null
  content?: string | null
  isPublished?: boolean | null
  author?: UserUpdateOneRequiredWithoutTimelinesInput | null
  mentions?: UserUpdateManyWithoutMentionsInput | null
}
export type TimelineUpdateWithoutAttachmentsDataInputInputObject =
  | Extract<keyof TimelineUpdateWithoutAttachmentsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface TimelineUpsertWithoutAttachmentsInput {
  update?: TimelineUpdateWithoutAttachmentsDataInput
  create?: TimelineCreateWithoutAttachmentsInput
}
export type TimelineUpsertWithoutAttachmentsInputInputObject =
  | Extract<keyof TimelineUpsertWithoutAttachmentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AttachmentUpdateManyMutationInput {
  type?: prisma.AttachmentType | null
  url?: string | null
}
export type AttachmentUpdateManyMutationInputInputObject =
  | Extract<keyof AttachmentUpdateManyMutationInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface TimelineCreateInput {
  id?: string | null
  title?: string
  content?: string
  isPublished?: boolean | null
  author?: UserCreateOneWithoutTimelinesInput
  attachments?: AttachmentCreateManyWithoutTimelineInput | null
  mentions?: UserCreateManyWithoutMentionsInput | null
}
export type TimelineCreateInputInputObject =
  | Extract<keyof TimelineCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface TimelineUpdateInput {
  title?: string | null
  content?: string | null
  isPublished?: boolean | null
  author?: UserUpdateOneRequiredWithoutTimelinesInput | null
  attachments?: AttachmentUpdateManyWithoutTimelineInput | null
  mentions?: UserUpdateManyWithoutMentionsInput | null
}
export type TimelineUpdateInputInputObject =
  | Extract<keyof TimelineUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface TimelineUpdateManyMutationInput {
  title?: string | null
  content?: string | null
  isPublished?: boolean | null
}
export type TimelineUpdateManyMutationInputInputObject =
  | Extract<keyof TimelineUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  
export interface ActionCreateInput {
  id?: string | null
  author?: UserCreateOneInput
  timeline?: TimelineCreateOneInput
  comment?: ActionCreateOneInput | null
  type?: prisma.ActionType
  content?: string | null
}
export type ActionCreateInputInputObject =
  | Extract<keyof ActionCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'timeline', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimelineCreateOneInput {
  create?: TimelineCreateInput | null
  connect?: TimelineWhereUniqueInput | null
}
export type TimelineCreateOneInputInputObject =
  | Extract<keyof TimelineCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ActionCreateOneInput {
  create?: ActionCreateInput | null
  connect?: ActionWhereUniqueInput | null
}
export type ActionCreateOneInputInputObject =
  | Extract<keyof ActionCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ActionUpdateInput {
  author?: UserUpdateOneRequiredInput | null
  timeline?: TimelineUpdateOneRequiredInput | null
  comment?: ActionUpdateOneInput | null
  type?: prisma.ActionType | null
  content?: string | null
}
export type ActionUpdateInputInputObject =
  | Extract<keyof ActionUpdateInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'timeline', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredInputInputObject =
  | Extract<keyof UserUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  username?: string | null
  email?: string | null
  password?: string | null
  timelines?: TimelineUpdateManyWithoutAuthorInput | null
  mentions?: TimelineUpdateManyWithoutMentionsInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'timelines', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TimelineUpdateOneRequiredInput {
  create?: TimelineCreateInput | null
  update?: TimelineUpdateDataInput | null
  upsert?: TimelineUpsertNestedInput | null
  connect?: TimelineWhereUniqueInput | null
}
export type TimelineUpdateOneRequiredInputInputObject =
  | Extract<keyof TimelineUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimelineUpdateDataInput {
  title?: string | null
  content?: string | null
  isPublished?: boolean | null
  author?: UserUpdateOneRequiredWithoutTimelinesInput | null
  attachments?: AttachmentUpdateManyWithoutTimelineInput | null
  mentions?: UserUpdateManyWithoutMentionsInput | null
}
export type TimelineUpdateDataInputInputObject =
  | Extract<keyof TimelineUpdateDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'mentions', alias?: string  } 
  
export interface TimelineUpsertNestedInput {
  update?: TimelineUpdateDataInput
  create?: TimelineCreateInput
}
export type TimelineUpsertNestedInputInputObject =
  | Extract<keyof TimelineUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ActionUpdateOneInput {
  create?: ActionCreateInput | null
  update?: ActionUpdateDataInput | null
  upsert?: ActionUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ActionWhereUniqueInput | null
}
export type ActionUpdateOneInputInputObject =
  | Extract<keyof ActionUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ActionUpdateDataInput {
  author?: UserUpdateOneRequiredInput | null
  timeline?: TimelineUpdateOneRequiredInput | null
  comment?: ActionUpdateOneInput | null
  type?: prisma.ActionType | null
  content?: string | null
}
export type ActionUpdateDataInputInputObject =
  | Extract<keyof ActionUpdateDataInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'timeline', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ActionUpsertNestedInput {
  update?: ActionUpdateDataInput
  create?: ActionCreateInput
}
export type ActionUpsertNestedInputInputObject =
  | Extract<keyof ActionUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ActionUpdateManyMutationInput {
  type?: prisma.ActionType | null
  content?: string | null
}
export type ActionUpdateManyMutationInputInputObject =
  | Extract<keyof ActionUpdateManyMutationInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttachmentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AttachmentWhereInput | null
  AND?: AttachmentSubscriptionWhereInput[]
  OR?: AttachmentSubscriptionWhereInput[]
  NOT?: AttachmentSubscriptionWhereInput[]
}
export type AttachmentSubscriptionWhereInputInputObject =
  | Extract<keyof AttachmentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TimelineSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TimelineWhereInput | null
  AND?: TimelineSubscriptionWhereInput[]
  OR?: TimelineSubscriptionWhereInput[]
  NOT?: TimelineSubscriptionWhereInput[]
}
export type TimelineSubscriptionWhereInputInputObject =
  | Extract<keyof TimelineSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ActionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ActionWhereInput | null
  AND?: ActionSubscriptionWhereInput[]
  OR?: ActionSubscriptionWhereInput[]
  NOT?: ActionSubscriptionWhereInput[]
}
export type ActionSubscriptionWhereInputInputObject =
  | Extract<keyof ActionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type AttachmentTypeValues =
  | 'IMAGE'
  | 'VIDEO'
  | 'URL'
  | 'STICKER'
  
export type TimelineOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'isPublished_ASC'
  | 'isPublished_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AttachmentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'username_ASC'
  | 'username_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ActionTypeValues =
  | 'LIKE'
  | 'SHARE'
  | 'COMMENT'
  
export type ActionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  