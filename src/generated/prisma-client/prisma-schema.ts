// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type Action {
  id: ID!
  author: User!
  timeline: Timeline!
  comment: Action
  type: ActionType!
  content: String
  createdAt: DateTime
}

type ActionConnection {
  pageInfo: PageInfo!
  edges: [ActionEdge]!
  aggregate: AggregateAction!
}

input ActionCreateInput {
  id: ID
  author: UserCreateOneInput!
  timeline: TimelineCreateOneInput!
  comment: ActionCreateOneInput
  type: ActionType!
  content: String
}

input ActionCreateOneInput {
  create: ActionCreateInput
  connect: ActionWhereUniqueInput
}

type ActionEdge {
  node: Action!
  cursor: String!
}

enum ActionOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActionPreviousValues {
  id: ID!
  type: ActionType!
  content: String
  createdAt: DateTime
}

type ActionSubscriptionPayload {
  mutation: MutationType!
  node: Action
  updatedFields: [String!]
  previousValues: ActionPreviousValues
}

input ActionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActionWhereInput
  AND: [ActionSubscriptionWhereInput!]
  OR: [ActionSubscriptionWhereInput!]
  NOT: [ActionSubscriptionWhereInput!]
}

enum ActionType {
  LIKE
  SHARE
  COMMENT
}

input ActionUpdateDataInput {
  author: UserUpdateOneRequiredInput
  timeline: TimelineUpdateOneRequiredInput
  comment: ActionUpdateOneInput
  type: ActionType
  content: String
}

input ActionUpdateInput {
  author: UserUpdateOneRequiredInput
  timeline: TimelineUpdateOneRequiredInput
  comment: ActionUpdateOneInput
  type: ActionType
  content: String
}

input ActionUpdateManyMutationInput {
  type: ActionType
  content: String
}

input ActionUpdateOneInput {
  create: ActionCreateInput
  update: ActionUpdateDataInput
  upsert: ActionUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ActionWhereUniqueInput
}

input ActionUpsertNestedInput {
  update: ActionUpdateDataInput!
  create: ActionCreateInput!
}

input ActionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  author: UserWhereInput
  timeline: TimelineWhereInput
  comment: ActionWhereInput
  type: ActionType
  type_not: ActionType
  type_in: [ActionType!]
  type_not_in: [ActionType!]
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
}

input ActionWhereUniqueInput {
  id: ID
}

type AggregateAction {
  count: Int!
}

type AggregateAttachment {
  count: Int!
}

type AggregateTimeline {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Attachment {
  id: ID!
  type: AttachmentType!
  url: String!
  timeline: Timeline!
  createdAt: DateTime!
}

type AttachmentConnection {
  pageInfo: PageInfo!
  edges: [AttachmentEdge]!
  aggregate: AggregateAttachment!
}

input AttachmentCreateInput {
  id: ID
  type: AttachmentType!
  url: String!
  timeline: TimelineCreateOneWithoutAttachmentsInput!
}

input AttachmentCreateManyWithoutTimelineInput {
  create: [AttachmentCreateWithoutTimelineInput!]
  connect: [AttachmentWhereUniqueInput!]
}

input AttachmentCreateWithoutTimelineInput {
  id: ID
  type: AttachmentType!
  url: String!
}

type AttachmentEdge {
  node: Attachment!
  cursor: String!
}

enum AttachmentOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type AttachmentPreviousValues {
  id: ID!
  type: AttachmentType!
  url: String!
  createdAt: DateTime!
}

input AttachmentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: AttachmentType
  type_not: AttachmentType
  type_in: [AttachmentType!]
  type_not_in: [AttachmentType!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [AttachmentScalarWhereInput!]
  OR: [AttachmentScalarWhereInput!]
  NOT: [AttachmentScalarWhereInput!]
}

type AttachmentSubscriptionPayload {
  mutation: MutationType!
  node: Attachment
  updatedFields: [String!]
  previousValues: AttachmentPreviousValues
}

input AttachmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AttachmentWhereInput
  AND: [AttachmentSubscriptionWhereInput!]
  OR: [AttachmentSubscriptionWhereInput!]
  NOT: [AttachmentSubscriptionWhereInput!]
}

enum AttachmentType {
  IMAGE
  VIDEO
  URL
  STICKER
}

input AttachmentUpdateInput {
  type: AttachmentType
  url: String
  timeline: TimelineUpdateOneRequiredWithoutAttachmentsInput
}

input AttachmentUpdateManyDataInput {
  type: AttachmentType
  url: String
}

input AttachmentUpdateManyMutationInput {
  type: AttachmentType
  url: String
}

input AttachmentUpdateManyWithoutTimelineInput {
  create: [AttachmentCreateWithoutTimelineInput!]
  delete: [AttachmentWhereUniqueInput!]
  connect: [AttachmentWhereUniqueInput!]
  set: [AttachmentWhereUniqueInput!]
  disconnect: [AttachmentWhereUniqueInput!]
  update: [AttachmentUpdateWithWhereUniqueWithoutTimelineInput!]
  upsert: [AttachmentUpsertWithWhereUniqueWithoutTimelineInput!]
  deleteMany: [AttachmentScalarWhereInput!]
  updateMany: [AttachmentUpdateManyWithWhereNestedInput!]
}

input AttachmentUpdateManyWithWhereNestedInput {
  where: AttachmentScalarWhereInput!
  data: AttachmentUpdateManyDataInput!
}

input AttachmentUpdateWithoutTimelineDataInput {
  type: AttachmentType
  url: String
}

input AttachmentUpdateWithWhereUniqueWithoutTimelineInput {
  where: AttachmentWhereUniqueInput!
  data: AttachmentUpdateWithoutTimelineDataInput!
}

input AttachmentUpsertWithWhereUniqueWithoutTimelineInput {
  where: AttachmentWhereUniqueInput!
  update: AttachmentUpdateWithoutTimelineDataInput!
  create: AttachmentCreateWithoutTimelineInput!
}

input AttachmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: AttachmentType
  type_not: AttachmentType
  type_in: [AttachmentType!]
  type_not_in: [AttachmentType!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  timeline: TimelineWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [AttachmentWhereInput!]
  OR: [AttachmentWhereInput!]
  NOT: [AttachmentWhereInput!]
}

input AttachmentWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createAction(data: ActionCreateInput!): Action!
  updateAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateManyActions(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): BatchPayload!
  upsertAction(where: ActionWhereUniqueInput!, create: ActionCreateInput!, update: ActionUpdateInput!): Action!
  deleteAction(where: ActionWhereUniqueInput!): Action
  deleteManyActions(where: ActionWhereInput): BatchPayload!
  createAttachment(data: AttachmentCreateInput!): Attachment!
  updateAttachment(data: AttachmentUpdateInput!, where: AttachmentWhereUniqueInput!): Attachment
  updateManyAttachments(data: AttachmentUpdateManyMutationInput!, where: AttachmentWhereInput): BatchPayload!
  upsertAttachment(where: AttachmentWhereUniqueInput!, create: AttachmentCreateInput!, update: AttachmentUpdateInput!): Attachment!
  deleteAttachment(where: AttachmentWhereUniqueInput!): Attachment
  deleteManyAttachments(where: AttachmentWhereInput): BatchPayload!
  createTimeline(data: TimelineCreateInput!): Timeline!
  updateTimeline(data: TimelineUpdateInput!, where: TimelineWhereUniqueInput!): Timeline
  updateManyTimelines(data: TimelineUpdateManyMutationInput!, where: TimelineWhereInput): BatchPayload!
  upsertTimeline(where: TimelineWhereUniqueInput!, create: TimelineCreateInput!, update: TimelineUpdateInput!): Timeline!
  deleteTimeline(where: TimelineWhereUniqueInput!): Timeline
  deleteManyTimelines(where: TimelineWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  action(where: ActionWhereUniqueInput!): Action
  actions(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Action]!
  actionsConnection(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionConnection!
  attachment(where: AttachmentWhereUniqueInput!): Attachment
  attachments(where: AttachmentWhereInput, orderBy: AttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attachment]!
  attachmentsConnection(where: AttachmentWhereInput, orderBy: AttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttachmentConnection!
  timeline(where: TimelineWhereUniqueInput!): Timeline
  timelines(where: TimelineWhereInput, orderBy: TimelineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Timeline]!
  timelinesConnection(where: TimelineWhereInput, orderBy: TimelineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimelineConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  action(where: ActionSubscriptionWhereInput): ActionSubscriptionPayload
  attachment(where: AttachmentSubscriptionWhereInput): AttachmentSubscriptionPayload
  timeline(where: TimelineSubscriptionWhereInput): TimelineSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Timeline {
  id: ID!
  title: String!
  content: String!
  isPublished: Boolean
  author: User!
  attachments(where: AttachmentWhereInput, orderBy: AttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attachment!]
  mentions(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TimelineConnection {
  pageInfo: PageInfo!
  edges: [TimelineEdge]!
  aggregate: AggregateTimeline!
}

input TimelineCreateInput {
  id: ID
  title: String!
  content: String!
  isPublished: Boolean
  author: UserCreateOneWithoutTimelinesInput!
  attachments: AttachmentCreateManyWithoutTimelineInput
  mentions: UserCreateManyWithoutMentionsInput
}

input TimelineCreateManyWithoutAuthorInput {
  create: [TimelineCreateWithoutAuthorInput!]
  connect: [TimelineWhereUniqueInput!]
}

input TimelineCreateManyWithoutMentionsInput {
  create: [TimelineCreateWithoutMentionsInput!]
  connect: [TimelineWhereUniqueInput!]
}

input TimelineCreateOneInput {
  create: TimelineCreateInput
  connect: TimelineWhereUniqueInput
}

input TimelineCreateOneWithoutAttachmentsInput {
  create: TimelineCreateWithoutAttachmentsInput
  connect: TimelineWhereUniqueInput
}

input TimelineCreateWithoutAttachmentsInput {
  id: ID
  title: String!
  content: String!
  isPublished: Boolean
  author: UserCreateOneWithoutTimelinesInput!
  mentions: UserCreateManyWithoutMentionsInput
}

input TimelineCreateWithoutAuthorInput {
  id: ID
  title: String!
  content: String!
  isPublished: Boolean
  attachments: AttachmentCreateManyWithoutTimelineInput
  mentions: UserCreateManyWithoutMentionsInput
}

input TimelineCreateWithoutMentionsInput {
  id: ID
  title: String!
  content: String!
  isPublished: Boolean
  author: UserCreateOneWithoutTimelinesInput!
  attachments: AttachmentCreateManyWithoutTimelineInput
}

type TimelineEdge {
  node: Timeline!
  cursor: String!
}

enum TimelineOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  isPublished_ASC
  isPublished_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TimelinePreviousValues {
  id: ID!
  title: String!
  content: String!
  isPublished: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TimelineScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TimelineScalarWhereInput!]
  OR: [TimelineScalarWhereInput!]
  NOT: [TimelineScalarWhereInput!]
}

type TimelineSubscriptionPayload {
  mutation: MutationType!
  node: Timeline
  updatedFields: [String!]
  previousValues: TimelinePreviousValues
}

input TimelineSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TimelineWhereInput
  AND: [TimelineSubscriptionWhereInput!]
  OR: [TimelineSubscriptionWhereInput!]
  NOT: [TimelineSubscriptionWhereInput!]
}

input TimelineUpdateDataInput {
  title: String
  content: String
  isPublished: Boolean
  author: UserUpdateOneRequiredWithoutTimelinesInput
  attachments: AttachmentUpdateManyWithoutTimelineInput
  mentions: UserUpdateManyWithoutMentionsInput
}

input TimelineUpdateInput {
  title: String
  content: String
  isPublished: Boolean
  author: UserUpdateOneRequiredWithoutTimelinesInput
  attachments: AttachmentUpdateManyWithoutTimelineInput
  mentions: UserUpdateManyWithoutMentionsInput
}

input TimelineUpdateManyDataInput {
  title: String
  content: String
  isPublished: Boolean
}

input TimelineUpdateManyMutationInput {
  title: String
  content: String
  isPublished: Boolean
}

input TimelineUpdateManyWithoutAuthorInput {
  create: [TimelineCreateWithoutAuthorInput!]
  delete: [TimelineWhereUniqueInput!]
  connect: [TimelineWhereUniqueInput!]
  set: [TimelineWhereUniqueInput!]
  disconnect: [TimelineWhereUniqueInput!]
  update: [TimelineUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [TimelineUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [TimelineScalarWhereInput!]
  updateMany: [TimelineUpdateManyWithWhereNestedInput!]
}

input TimelineUpdateManyWithoutMentionsInput {
  create: [TimelineCreateWithoutMentionsInput!]
  delete: [TimelineWhereUniqueInput!]
  connect: [TimelineWhereUniqueInput!]
  set: [TimelineWhereUniqueInput!]
  disconnect: [TimelineWhereUniqueInput!]
  update: [TimelineUpdateWithWhereUniqueWithoutMentionsInput!]
  upsert: [TimelineUpsertWithWhereUniqueWithoutMentionsInput!]
  deleteMany: [TimelineScalarWhereInput!]
  updateMany: [TimelineUpdateManyWithWhereNestedInput!]
}

input TimelineUpdateManyWithWhereNestedInput {
  where: TimelineScalarWhereInput!
  data: TimelineUpdateManyDataInput!
}

input TimelineUpdateOneRequiredInput {
  create: TimelineCreateInput
  update: TimelineUpdateDataInput
  upsert: TimelineUpsertNestedInput
  connect: TimelineWhereUniqueInput
}

input TimelineUpdateOneRequiredWithoutAttachmentsInput {
  create: TimelineCreateWithoutAttachmentsInput
  update: TimelineUpdateWithoutAttachmentsDataInput
  upsert: TimelineUpsertWithoutAttachmentsInput
  connect: TimelineWhereUniqueInput
}

input TimelineUpdateWithoutAttachmentsDataInput {
  title: String
  content: String
  isPublished: Boolean
  author: UserUpdateOneRequiredWithoutTimelinesInput
  mentions: UserUpdateManyWithoutMentionsInput
}

input TimelineUpdateWithoutAuthorDataInput {
  title: String
  content: String
  isPublished: Boolean
  attachments: AttachmentUpdateManyWithoutTimelineInput
  mentions: UserUpdateManyWithoutMentionsInput
}

input TimelineUpdateWithoutMentionsDataInput {
  title: String
  content: String
  isPublished: Boolean
  author: UserUpdateOneRequiredWithoutTimelinesInput
  attachments: AttachmentUpdateManyWithoutTimelineInput
}

input TimelineUpdateWithWhereUniqueWithoutAuthorInput {
  where: TimelineWhereUniqueInput!
  data: TimelineUpdateWithoutAuthorDataInput!
}

input TimelineUpdateWithWhereUniqueWithoutMentionsInput {
  where: TimelineWhereUniqueInput!
  data: TimelineUpdateWithoutMentionsDataInput!
}

input TimelineUpsertNestedInput {
  update: TimelineUpdateDataInput!
  create: TimelineCreateInput!
}

input TimelineUpsertWithoutAttachmentsInput {
  update: TimelineUpdateWithoutAttachmentsDataInput!
  create: TimelineCreateWithoutAttachmentsInput!
}

input TimelineUpsertWithWhereUniqueWithoutAuthorInput {
  where: TimelineWhereUniqueInput!
  update: TimelineUpdateWithoutAuthorDataInput!
  create: TimelineCreateWithoutAuthorInput!
}

input TimelineUpsertWithWhereUniqueWithoutMentionsInput {
  where: TimelineWhereUniqueInput!
  update: TimelineUpdateWithoutMentionsDataInput!
  create: TimelineCreateWithoutMentionsInput!
}

input TimelineWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  author: UserWhereInput
  attachments_every: AttachmentWhereInput
  attachments_some: AttachmentWhereInput
  attachments_none: AttachmentWhereInput
  mentions_every: UserWhereInput
  mentions_some: UserWhereInput
  mentions_none: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TimelineWhereInput!]
  OR: [TimelineWhereInput!]
  NOT: [TimelineWhereInput!]
}

input TimelineWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  timelines(where: TimelineWhereInput, orderBy: TimelineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Timeline!]
  mentions(where: TimelineWhereInput, orderBy: TimelineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Timeline!]
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  password: String!
  timelines: TimelineCreateManyWithoutAuthorInput
  mentions: TimelineCreateManyWithoutMentionsInput
}

input UserCreateManyWithoutMentionsInput {
  create: [UserCreateWithoutMentionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTimelinesInput {
  create: UserCreateWithoutTimelinesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMentionsInput {
  id: ID
  username: String!
  email: String!
  password: String!
  timelines: TimelineCreateManyWithoutAuthorInput
}

input UserCreateWithoutTimelinesInput {
  id: ID
  username: String!
  email: String!
  password: String!
  mentions: TimelineCreateManyWithoutMentionsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
  createdAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  email: String
  password: String
  timelines: TimelineUpdateManyWithoutAuthorInput
  mentions: TimelineUpdateManyWithoutMentionsInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  timelines: TimelineUpdateManyWithoutAuthorInput
  mentions: TimelineUpdateManyWithoutMentionsInput
}

input UserUpdateManyDataInput {
  username: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
}

input UserUpdateManyWithoutMentionsInput {
  create: [UserCreateWithoutMentionsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutMentionsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutMentionsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTimelinesInput {
  create: UserCreateWithoutTimelinesInput
  update: UserUpdateWithoutTimelinesDataInput
  upsert: UserUpsertWithoutTimelinesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutMentionsDataInput {
  username: String
  email: String
  password: String
  timelines: TimelineUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutTimelinesDataInput {
  username: String
  email: String
  password: String
  mentions: TimelineUpdateManyWithoutMentionsInput
}

input UserUpdateWithWhereUniqueWithoutMentionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutMentionsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutTimelinesInput {
  update: UserUpdateWithoutTimelinesDataInput!
  create: UserCreateWithoutTimelinesInput!
}

input UserUpsertWithWhereUniqueWithoutMentionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutMentionsDataInput!
  create: UserCreateWithoutMentionsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  timelines_every: TimelineWhereInput
  timelines_some: TimelineWhereInput
  timelines_none: TimelineWhereInput
  mentions_every: TimelineWhereInput
  mentions_some: TimelineWhereInput
  mentions_none: TimelineWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`