// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  action: (where?: ActionWhereInput) => Promise<boolean>;
  attachment: (where?: AttachmentWhereInput) => Promise<boolean>;
  timeline: (where?: TimelineWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  action: (where: ActionWhereUniqueInput) => ActionNullablePromise;
  actions: (args?: {
    where?: ActionWhereInput;
    orderBy?: ActionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Action>;
  actionsConnection: (args?: {
    where?: ActionWhereInput;
    orderBy?: ActionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActionConnectionPromise;
  attachment: (where: AttachmentWhereUniqueInput) => AttachmentNullablePromise;
  attachments: (args?: {
    where?: AttachmentWhereInput;
    orderBy?: AttachmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Attachment>;
  attachmentsConnection: (args?: {
    where?: AttachmentWhereInput;
    orderBy?: AttachmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttachmentConnectionPromise;
  timeline: (where: TimelineWhereUniqueInput) => TimelineNullablePromise;
  timelines: (args?: {
    where?: TimelineWhereInput;
    orderBy?: TimelineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Timeline>;
  timelinesConnection: (args?: {
    where?: TimelineWhereInput;
    orderBy?: TimelineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TimelineConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAction: (data: ActionCreateInput) => ActionPromise;
  updateAction: (args: {
    data: ActionUpdateInput;
    where: ActionWhereUniqueInput;
  }) => ActionPromise;
  updateManyActions: (args: {
    data: ActionUpdateManyMutationInput;
    where?: ActionWhereInput;
  }) => BatchPayloadPromise;
  upsertAction: (args: {
    where: ActionWhereUniqueInput;
    create: ActionCreateInput;
    update: ActionUpdateInput;
  }) => ActionPromise;
  deleteAction: (where: ActionWhereUniqueInput) => ActionPromise;
  deleteManyActions: (where?: ActionWhereInput) => BatchPayloadPromise;
  createAttachment: (data: AttachmentCreateInput) => AttachmentPromise;
  updateAttachment: (args: {
    data: AttachmentUpdateInput;
    where: AttachmentWhereUniqueInput;
  }) => AttachmentPromise;
  updateManyAttachments: (args: {
    data: AttachmentUpdateManyMutationInput;
    where?: AttachmentWhereInput;
  }) => BatchPayloadPromise;
  upsertAttachment: (args: {
    where: AttachmentWhereUniqueInput;
    create: AttachmentCreateInput;
    update: AttachmentUpdateInput;
  }) => AttachmentPromise;
  deleteAttachment: (where: AttachmentWhereUniqueInput) => AttachmentPromise;
  deleteManyAttachments: (where?: AttachmentWhereInput) => BatchPayloadPromise;
  createTimeline: (data: TimelineCreateInput) => TimelinePromise;
  updateTimeline: (args: {
    data: TimelineUpdateInput;
    where: TimelineWhereUniqueInput;
  }) => TimelinePromise;
  updateManyTimelines: (args: {
    data: TimelineUpdateManyMutationInput;
    where?: TimelineWhereInput;
  }) => BatchPayloadPromise;
  upsertTimeline: (args: {
    where: TimelineWhereUniqueInput;
    create: TimelineCreateInput;
    update: TimelineUpdateInput;
  }) => TimelinePromise;
  deleteTimeline: (where: TimelineWhereUniqueInput) => TimelinePromise;
  deleteManyTimelines: (where?: TimelineWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  action: (
    where?: ActionSubscriptionWhereInput
  ) => ActionSubscriptionPayloadSubscription;
  attachment: (
    where?: AttachmentSubscriptionWhereInput
  ) => AttachmentSubscriptionPayloadSubscription;
  timeline: (
    where?: TimelineSubscriptionWhereInput
  ) => TimelineSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AttachmentType = "IMAGE" | "VIDEO" | "URL" | "STICKER";

export type TimelineOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AttachmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ActionType = "LIKE" | "SHARE" | "COMMENT";

export type ActionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ActionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TimelineWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  author?: Maybe<UserWhereInput>;
  attachments_every?: Maybe<AttachmentWhereInput>;
  attachments_some?: Maybe<AttachmentWhereInput>;
  attachments_none?: Maybe<AttachmentWhereInput>;
  mentions_every?: Maybe<UserWhereInput>;
  mentions_some?: Maybe<UserWhereInput>;
  mentions_none?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TimelineWhereInput[] | TimelineWhereInput>;
  OR?: Maybe<TimelineWhereInput[] | TimelineWhereInput>;
  NOT?: Maybe<TimelineWhereInput[] | TimelineWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  timelines_every?: Maybe<TimelineWhereInput>;
  timelines_some?: Maybe<TimelineWhereInput>;
  timelines_none?: Maybe<TimelineWhereInput>;
  mentions_every?: Maybe<TimelineWhereInput>;
  mentions_some?: Maybe<TimelineWhereInput>;
  mentions_none?: Maybe<TimelineWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface AttachmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<AttachmentType>;
  type_not?: Maybe<AttachmentType>;
  type_in?: Maybe<AttachmentType[] | AttachmentType>;
  type_not_in?: Maybe<AttachmentType[] | AttachmentType>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  timeline?: Maybe<TimelineWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AttachmentWhereInput[] | AttachmentWhereInput>;
  OR?: Maybe<AttachmentWhereInput[] | AttachmentWhereInput>;
  NOT?: Maybe<AttachmentWhereInput[] | AttachmentWhereInput>;
}

export interface ActionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<UserWhereInput>;
  timeline?: Maybe<TimelineWhereInput>;
  comment?: Maybe<ActionWhereInput>;
  type?: Maybe<ActionType>;
  type_not?: Maybe<ActionType>;
  type_in?: Maybe<ActionType[] | ActionType>;
  type_not_in?: Maybe<ActionType[] | ActionType>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ActionWhereInput[] | ActionWhereInput>;
  OR?: Maybe<ActionWhereInput[] | ActionWhereInput>;
  NOT?: Maybe<ActionWhereInput[] | ActionWhereInput>;
}

export type AttachmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TimelineWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ActionCreateInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneInput;
  timeline: TimelineCreateOneInput;
  comment?: Maybe<ActionCreateOneInput>;
  type: ActionType;
  content?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  timelines?: Maybe<TimelineCreateManyWithoutAuthorInput>;
  mentions?: Maybe<TimelineCreateManyWithoutMentionsInput>;
}

export interface TimelineCreateManyWithoutAuthorInput {
  create?: Maybe<
    TimelineCreateWithoutAuthorInput[] | TimelineCreateWithoutAuthorInput
  >;
  connect?: Maybe<TimelineWhereUniqueInput[] | TimelineWhereUniqueInput>;
}

export interface TimelineCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  isPublished?: Maybe<Boolean>;
  attachments?: Maybe<AttachmentCreateManyWithoutTimelineInput>;
  mentions?: Maybe<UserCreateManyWithoutMentionsInput>;
}

export interface AttachmentCreateManyWithoutTimelineInput {
  create?: Maybe<
    | AttachmentCreateWithoutTimelineInput[]
    | AttachmentCreateWithoutTimelineInput
  >;
  connect?: Maybe<AttachmentWhereUniqueInput[] | AttachmentWhereUniqueInput>;
}

export interface AttachmentCreateWithoutTimelineInput {
  id?: Maybe<ID_Input>;
  type: AttachmentType;
  url: String;
}

export interface UserCreateManyWithoutMentionsInput {
  create?: Maybe<
    UserCreateWithoutMentionsInput[] | UserCreateWithoutMentionsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutMentionsInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  timelines?: Maybe<TimelineCreateManyWithoutAuthorInput>;
}

export interface TimelineCreateManyWithoutMentionsInput {
  create?: Maybe<
    TimelineCreateWithoutMentionsInput[] | TimelineCreateWithoutMentionsInput
  >;
  connect?: Maybe<TimelineWhereUniqueInput[] | TimelineWhereUniqueInput>;
}

export interface TimelineCreateWithoutMentionsInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  isPublished?: Maybe<Boolean>;
  author: UserCreateOneWithoutTimelinesInput;
  attachments?: Maybe<AttachmentCreateManyWithoutTimelineInput>;
}

export interface UserCreateOneWithoutTimelinesInput {
  create?: Maybe<UserCreateWithoutTimelinesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTimelinesInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  mentions?: Maybe<TimelineCreateManyWithoutMentionsInput>;
}

export interface TimelineCreateOneInput {
  create?: Maybe<TimelineCreateInput>;
  connect?: Maybe<TimelineWhereUniqueInput>;
}

export interface TimelineCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  isPublished?: Maybe<Boolean>;
  author: UserCreateOneWithoutTimelinesInput;
  attachments?: Maybe<AttachmentCreateManyWithoutTimelineInput>;
  mentions?: Maybe<UserCreateManyWithoutMentionsInput>;
}

export interface ActionCreateOneInput {
  create?: Maybe<ActionCreateInput>;
  connect?: Maybe<ActionWhereUniqueInput>;
}

export interface ActionUpdateInput {
  author?: Maybe<UserUpdateOneRequiredInput>;
  timeline?: Maybe<TimelineUpdateOneRequiredInput>;
  comment?: Maybe<ActionUpdateOneInput>;
  type?: Maybe<ActionType>;
  content?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  timelines?: Maybe<TimelineUpdateManyWithoutAuthorInput>;
  mentions?: Maybe<TimelineUpdateManyWithoutMentionsInput>;
}

export interface TimelineUpdateManyWithoutAuthorInput {
  create?: Maybe<
    TimelineCreateWithoutAuthorInput[] | TimelineCreateWithoutAuthorInput
  >;
  delete?: Maybe<TimelineWhereUniqueInput[] | TimelineWhereUniqueInput>;
  connect?: Maybe<TimelineWhereUniqueInput[] | TimelineWhereUniqueInput>;
  set?: Maybe<TimelineWhereUniqueInput[] | TimelineWhereUniqueInput>;
  disconnect?: Maybe<TimelineWhereUniqueInput[] | TimelineWhereUniqueInput>;
  update?: Maybe<
    | TimelineUpdateWithWhereUniqueWithoutAuthorInput[]
    | TimelineUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | TimelineUpsertWithWhereUniqueWithoutAuthorInput[]
    | TimelineUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<TimelineScalarWhereInput[] | TimelineScalarWhereInput>;
  updateMany?: Maybe<
    | TimelineUpdateManyWithWhereNestedInput[]
    | TimelineUpdateManyWithWhereNestedInput
  >;
}

export interface TimelineUpdateWithWhereUniqueWithoutAuthorInput {
  where: TimelineWhereUniqueInput;
  data: TimelineUpdateWithoutAuthorDataInput;
}

export interface TimelineUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  attachments?: Maybe<AttachmentUpdateManyWithoutTimelineInput>;
  mentions?: Maybe<UserUpdateManyWithoutMentionsInput>;
}

export interface AttachmentUpdateManyWithoutTimelineInput {
  create?: Maybe<
    | AttachmentCreateWithoutTimelineInput[]
    | AttachmentCreateWithoutTimelineInput
  >;
  delete?: Maybe<AttachmentWhereUniqueInput[] | AttachmentWhereUniqueInput>;
  connect?: Maybe<AttachmentWhereUniqueInput[] | AttachmentWhereUniqueInput>;
  set?: Maybe<AttachmentWhereUniqueInput[] | AttachmentWhereUniqueInput>;
  disconnect?: Maybe<AttachmentWhereUniqueInput[] | AttachmentWhereUniqueInput>;
  update?: Maybe<
    | AttachmentUpdateWithWhereUniqueWithoutTimelineInput[]
    | AttachmentUpdateWithWhereUniqueWithoutTimelineInput
  >;
  upsert?: Maybe<
    | AttachmentUpsertWithWhereUniqueWithoutTimelineInput[]
    | AttachmentUpsertWithWhereUniqueWithoutTimelineInput
  >;
  deleteMany?: Maybe<AttachmentScalarWhereInput[] | AttachmentScalarWhereInput>;
  updateMany?: Maybe<
    | AttachmentUpdateManyWithWhereNestedInput[]
    | AttachmentUpdateManyWithWhereNestedInput
  >;
}

export interface AttachmentUpdateWithWhereUniqueWithoutTimelineInput {
  where: AttachmentWhereUniqueInput;
  data: AttachmentUpdateWithoutTimelineDataInput;
}

export interface AttachmentUpdateWithoutTimelineDataInput {
  type?: Maybe<AttachmentType>;
  url?: Maybe<String>;
}

export interface AttachmentUpsertWithWhereUniqueWithoutTimelineInput {
  where: AttachmentWhereUniqueInput;
  update: AttachmentUpdateWithoutTimelineDataInput;
  create: AttachmentCreateWithoutTimelineInput;
}

export interface AttachmentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<AttachmentType>;
  type_not?: Maybe<AttachmentType>;
  type_in?: Maybe<AttachmentType[] | AttachmentType>;
  type_not_in?: Maybe<AttachmentType[] | AttachmentType>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AttachmentScalarWhereInput[] | AttachmentScalarWhereInput>;
  OR?: Maybe<AttachmentScalarWhereInput[] | AttachmentScalarWhereInput>;
  NOT?: Maybe<AttachmentScalarWhereInput[] | AttachmentScalarWhereInput>;
}

export interface AttachmentUpdateManyWithWhereNestedInput {
  where: AttachmentScalarWhereInput;
  data: AttachmentUpdateManyDataInput;
}

export interface AttachmentUpdateManyDataInput {
  type?: Maybe<AttachmentType>;
  url?: Maybe<String>;
}

export interface UserUpdateManyWithoutMentionsInput {
  create?: Maybe<
    UserCreateWithoutMentionsInput[] | UserCreateWithoutMentionsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutMentionsInput[]
    | UserUpdateWithWhereUniqueWithoutMentionsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutMentionsInput[]
    | UserUpsertWithWhereUniqueWithoutMentionsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutMentionsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMentionsDataInput;
}

export interface UserUpdateWithoutMentionsDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  timelines?: Maybe<TimelineUpdateManyWithoutAuthorInput>;
}

export interface UserUpsertWithWhereUniqueWithoutMentionsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMentionsDataInput;
  create: UserCreateWithoutMentionsInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface TimelineUpsertWithWhereUniqueWithoutAuthorInput {
  where: TimelineWhereUniqueInput;
  update: TimelineUpdateWithoutAuthorDataInput;
  create: TimelineCreateWithoutAuthorInput;
}

export interface TimelineScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TimelineScalarWhereInput[] | TimelineScalarWhereInput>;
  OR?: Maybe<TimelineScalarWhereInput[] | TimelineScalarWhereInput>;
  NOT?: Maybe<TimelineScalarWhereInput[] | TimelineScalarWhereInput>;
}

export interface TimelineUpdateManyWithWhereNestedInput {
  where: TimelineScalarWhereInput;
  data: TimelineUpdateManyDataInput;
}

export interface TimelineUpdateManyDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface TimelineUpdateManyWithoutMentionsInput {
  create?: Maybe<
    TimelineCreateWithoutMentionsInput[] | TimelineCreateWithoutMentionsInput
  >;
  delete?: Maybe<TimelineWhereUniqueInput[] | TimelineWhereUniqueInput>;
  connect?: Maybe<TimelineWhereUniqueInput[] | TimelineWhereUniqueInput>;
  set?: Maybe<TimelineWhereUniqueInput[] | TimelineWhereUniqueInput>;
  disconnect?: Maybe<TimelineWhereUniqueInput[] | TimelineWhereUniqueInput>;
  update?: Maybe<
    | TimelineUpdateWithWhereUniqueWithoutMentionsInput[]
    | TimelineUpdateWithWhereUniqueWithoutMentionsInput
  >;
  upsert?: Maybe<
    | TimelineUpsertWithWhereUniqueWithoutMentionsInput[]
    | TimelineUpsertWithWhereUniqueWithoutMentionsInput
  >;
  deleteMany?: Maybe<TimelineScalarWhereInput[] | TimelineScalarWhereInput>;
  updateMany?: Maybe<
    | TimelineUpdateManyWithWhereNestedInput[]
    | TimelineUpdateManyWithWhereNestedInput
  >;
}

export interface TimelineUpdateWithWhereUniqueWithoutMentionsInput {
  where: TimelineWhereUniqueInput;
  data: TimelineUpdateWithoutMentionsDataInput;
}

export interface TimelineUpdateWithoutMentionsDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutTimelinesInput>;
  attachments?: Maybe<AttachmentUpdateManyWithoutTimelineInput>;
}

export interface UserUpdateOneRequiredWithoutTimelinesInput {
  create?: Maybe<UserCreateWithoutTimelinesInput>;
  update?: Maybe<UserUpdateWithoutTimelinesDataInput>;
  upsert?: Maybe<UserUpsertWithoutTimelinesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTimelinesDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  mentions?: Maybe<TimelineUpdateManyWithoutMentionsInput>;
}

export interface UserUpsertWithoutTimelinesInput {
  update: UserUpdateWithoutTimelinesDataInput;
  create: UserCreateWithoutTimelinesInput;
}

export interface TimelineUpsertWithWhereUniqueWithoutMentionsInput {
  where: TimelineWhereUniqueInput;
  update: TimelineUpdateWithoutMentionsDataInput;
  create: TimelineCreateWithoutMentionsInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface TimelineUpdateOneRequiredInput {
  create?: Maybe<TimelineCreateInput>;
  update?: Maybe<TimelineUpdateDataInput>;
  upsert?: Maybe<TimelineUpsertNestedInput>;
  connect?: Maybe<TimelineWhereUniqueInput>;
}

export interface TimelineUpdateDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutTimelinesInput>;
  attachments?: Maybe<AttachmentUpdateManyWithoutTimelineInput>;
  mentions?: Maybe<UserUpdateManyWithoutMentionsInput>;
}

export interface TimelineUpsertNestedInput {
  update: TimelineUpdateDataInput;
  create: TimelineCreateInput;
}

export interface ActionUpdateOneInput {
  create?: Maybe<ActionCreateInput>;
  update?: Maybe<ActionUpdateDataInput>;
  upsert?: Maybe<ActionUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ActionWhereUniqueInput>;
}

export interface ActionUpdateDataInput {
  author?: Maybe<UserUpdateOneRequiredInput>;
  timeline?: Maybe<TimelineUpdateOneRequiredInput>;
  comment?: Maybe<ActionUpdateOneInput>;
  type?: Maybe<ActionType>;
  content?: Maybe<String>;
}

export interface ActionUpsertNestedInput {
  update: ActionUpdateDataInput;
  create: ActionCreateInput;
}

export interface ActionUpdateManyMutationInput {
  type?: Maybe<ActionType>;
  content?: Maybe<String>;
}

export interface AttachmentCreateInput {
  id?: Maybe<ID_Input>;
  type: AttachmentType;
  url: String;
  timeline: TimelineCreateOneWithoutAttachmentsInput;
}

export interface TimelineCreateOneWithoutAttachmentsInput {
  create?: Maybe<TimelineCreateWithoutAttachmentsInput>;
  connect?: Maybe<TimelineWhereUniqueInput>;
}

export interface TimelineCreateWithoutAttachmentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  isPublished?: Maybe<Boolean>;
  author: UserCreateOneWithoutTimelinesInput;
  mentions?: Maybe<UserCreateManyWithoutMentionsInput>;
}

export interface AttachmentUpdateInput {
  type?: Maybe<AttachmentType>;
  url?: Maybe<String>;
  timeline?: Maybe<TimelineUpdateOneRequiredWithoutAttachmentsInput>;
}

export interface TimelineUpdateOneRequiredWithoutAttachmentsInput {
  create?: Maybe<TimelineCreateWithoutAttachmentsInput>;
  update?: Maybe<TimelineUpdateWithoutAttachmentsDataInput>;
  upsert?: Maybe<TimelineUpsertWithoutAttachmentsInput>;
  connect?: Maybe<TimelineWhereUniqueInput>;
}

export interface TimelineUpdateWithoutAttachmentsDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutTimelinesInput>;
  mentions?: Maybe<UserUpdateManyWithoutMentionsInput>;
}

export interface TimelineUpsertWithoutAttachmentsInput {
  update: TimelineUpdateWithoutAttachmentsDataInput;
  create: TimelineCreateWithoutAttachmentsInput;
}

export interface AttachmentUpdateManyMutationInput {
  type?: Maybe<AttachmentType>;
  url?: Maybe<String>;
}

export interface TimelineUpdateInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutTimelinesInput>;
  attachments?: Maybe<AttachmentUpdateManyWithoutTimelineInput>;
  mentions?: Maybe<UserUpdateManyWithoutMentionsInput>;
}

export interface TimelineUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  timelines?: Maybe<TimelineUpdateManyWithoutAuthorInput>;
  mentions?: Maybe<TimelineUpdateManyWithoutMentionsInput>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface ActionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActionWhereInput>;
  AND?: Maybe<ActionSubscriptionWhereInput[] | ActionSubscriptionWhereInput>;
  OR?: Maybe<ActionSubscriptionWhereInput[] | ActionSubscriptionWhereInput>;
  NOT?: Maybe<ActionSubscriptionWhereInput[] | ActionSubscriptionWhereInput>;
}

export interface AttachmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AttachmentWhereInput>;
  AND?: Maybe<
    AttachmentSubscriptionWhereInput[] | AttachmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    AttachmentSubscriptionWhereInput[] | AttachmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AttachmentSubscriptionWhereInput[] | AttachmentSubscriptionWhereInput
  >;
}

export interface TimelineSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TimelineWhereInput>;
  AND?: Maybe<
    TimelineSubscriptionWhereInput[] | TimelineSubscriptionWhereInput
  >;
  OR?: Maybe<TimelineSubscriptionWhereInput[] | TimelineSubscriptionWhereInput>;
  NOT?: Maybe<
    TimelineSubscriptionWhereInput[] | TimelineSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Action {
  id: ID_Output;
  type: ActionType;
  content?: String;
  createdAt?: DateTimeOutput;
}

export interface ActionPromise extends Promise<Action>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  timeline: <T = TimelinePromise>() => T;
  comment: <T = ActionPromise>() => T;
  type: () => Promise<ActionType>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActionSubscription
  extends Promise<AsyncIterator<Action>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  timeline: <T = TimelineSubscription>() => T;
  comment: <T = ActionSubscription>() => T;
  type: () => Promise<AsyncIterator<ActionType>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActionNullablePromise
  extends Promise<Action | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  timeline: <T = TimelinePromise>() => T;
  comment: <T = ActionPromise>() => T;
  type: () => Promise<ActionType>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  timelines: <T = FragmentableArray<Timeline>>(args?: {
    where?: TimelineWhereInput;
    orderBy?: TimelineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = FragmentableArray<Timeline>>(args?: {
    where?: TimelineWhereInput;
    orderBy?: TimelineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  timelines: <T = Promise<AsyncIterator<TimelineSubscription>>>(args?: {
    where?: TimelineWhereInput;
    orderBy?: TimelineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = Promise<AsyncIterator<TimelineSubscription>>>(args?: {
    where?: TimelineWhereInput;
    orderBy?: TimelineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  timelines: <T = FragmentableArray<Timeline>>(args?: {
    where?: TimelineWhereInput;
    orderBy?: TimelineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = FragmentableArray<Timeline>>(args?: {
    where?: TimelineWhereInput;
    orderBy?: TimelineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Timeline {
  id: ID_Output;
  title: String;
  content: String;
  isPublished?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TimelinePromise extends Promise<Timeline>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  attachments: <T = FragmentableArray<Attachment>>(args?: {
    where?: AttachmentWhereInput;
    orderBy?: AttachmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TimelineSubscription
  extends Promise<AsyncIterator<Timeline>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
  attachments: <T = Promise<AsyncIterator<AttachmentSubscription>>>(args?: {
    where?: AttachmentWhereInput;
    orderBy?: AttachmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TimelineNullablePromise
  extends Promise<Timeline | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  attachments: <T = FragmentableArray<Attachment>>(args?: {
    where?: AttachmentWhereInput;
    orderBy?: AttachmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Attachment {
  id: ID_Output;
  type: AttachmentType;
  url: String;
  createdAt: DateTimeOutput;
}

export interface AttachmentPromise extends Promise<Attachment>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AttachmentType>;
  url: () => Promise<String>;
  timeline: <T = TimelinePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AttachmentSubscription
  extends Promise<AsyncIterator<Attachment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AttachmentType>>;
  url: () => Promise<AsyncIterator<String>>;
  timeline: <T = TimelineSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AttachmentNullablePromise
  extends Promise<Attachment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AttachmentType>;
  url: () => Promise<String>;
  timeline: <T = TimelinePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActionConnection {
  pageInfo: PageInfo;
  edges: ActionEdge[];
}

export interface ActionConnectionPromise
  extends Promise<ActionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActionEdge>>() => T;
  aggregate: <T = AggregateActionPromise>() => T;
}

export interface ActionConnectionSubscription
  extends Promise<AsyncIterator<ActionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ActionEdge {
  node: Action;
  cursor: String;
}

export interface ActionEdgePromise extends Promise<ActionEdge>, Fragmentable {
  node: <T = ActionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActionEdgeSubscription
  extends Promise<AsyncIterator<ActionEdge>>,
    Fragmentable {
  node: <T = ActionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAction {
  count: Int;
}

export interface AggregateActionPromise
  extends Promise<AggregateAction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActionSubscription
  extends Promise<AsyncIterator<AggregateAction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AttachmentConnection {
  pageInfo: PageInfo;
  edges: AttachmentEdge[];
}

export interface AttachmentConnectionPromise
  extends Promise<AttachmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttachmentEdge>>() => T;
  aggregate: <T = AggregateAttachmentPromise>() => T;
}

export interface AttachmentConnectionSubscription
  extends Promise<AsyncIterator<AttachmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttachmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttachmentSubscription>() => T;
}

export interface AttachmentEdge {
  node: Attachment;
  cursor: String;
}

export interface AttachmentEdgePromise
  extends Promise<AttachmentEdge>,
    Fragmentable {
  node: <T = AttachmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttachmentEdgeSubscription
  extends Promise<AsyncIterator<AttachmentEdge>>,
    Fragmentable {
  node: <T = AttachmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAttachment {
  count: Int;
}

export interface AggregateAttachmentPromise
  extends Promise<AggregateAttachment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttachmentSubscription
  extends Promise<AsyncIterator<AggregateAttachment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TimelineConnection {
  pageInfo: PageInfo;
  edges: TimelineEdge[];
}

export interface TimelineConnectionPromise
  extends Promise<TimelineConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TimelineEdge>>() => T;
  aggregate: <T = AggregateTimelinePromise>() => T;
}

export interface TimelineConnectionSubscription
  extends Promise<AsyncIterator<TimelineConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TimelineEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTimelineSubscription>() => T;
}

export interface TimelineEdge {
  node: Timeline;
  cursor: String;
}

export interface TimelineEdgePromise
  extends Promise<TimelineEdge>,
    Fragmentable {
  node: <T = TimelinePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TimelineEdgeSubscription
  extends Promise<AsyncIterator<TimelineEdge>>,
    Fragmentable {
  node: <T = TimelineSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTimeline {
  count: Int;
}

export interface AggregateTimelinePromise
  extends Promise<AggregateTimeline>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTimelineSubscription
  extends Promise<AsyncIterator<AggregateTimeline>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ActionSubscriptionPayload {
  mutation: MutationType;
  node: Action;
  updatedFields: String[];
  previousValues: ActionPreviousValues;
}

export interface ActionSubscriptionPayloadPromise
  extends Promise<ActionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActionPreviousValuesPromise>() => T;
}

export interface ActionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActionPreviousValuesSubscription>() => T;
}

export interface ActionPreviousValues {
  id: ID_Output;
  type: ActionType;
  content?: String;
  createdAt?: DateTimeOutput;
}

export interface ActionPreviousValuesPromise
  extends Promise<ActionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ActionType>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActionPreviousValuesSubscription
  extends Promise<AsyncIterator<ActionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ActionType>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AttachmentSubscriptionPayload {
  mutation: MutationType;
  node: Attachment;
  updatedFields: String[];
  previousValues: AttachmentPreviousValues;
}

export interface AttachmentSubscriptionPayloadPromise
  extends Promise<AttachmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttachmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttachmentPreviousValuesPromise>() => T;
}

export interface AttachmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttachmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttachmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttachmentPreviousValuesSubscription>() => T;
}

export interface AttachmentPreviousValues {
  id: ID_Output;
  type: AttachmentType;
  url: String;
  createdAt: DateTimeOutput;
}

export interface AttachmentPreviousValuesPromise
  extends Promise<AttachmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AttachmentType>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AttachmentPreviousValuesSubscription
  extends Promise<AsyncIterator<AttachmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AttachmentType>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TimelineSubscriptionPayload {
  mutation: MutationType;
  node: Timeline;
  updatedFields: String[];
  previousValues: TimelinePreviousValues;
}

export interface TimelineSubscriptionPayloadPromise
  extends Promise<TimelineSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TimelinePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TimelinePreviousValuesPromise>() => T;
}

export interface TimelineSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TimelineSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TimelineSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TimelinePreviousValuesSubscription>() => T;
}

export interface TimelinePreviousValues {
  id: ID_Output;
  title: String;
  content: String;
  isPublished?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TimelinePreviousValuesPromise
  extends Promise<TimelinePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TimelinePreviousValuesSubscription
  extends Promise<AsyncIterator<TimelinePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "AttachmentType",
    embedded: false
  },
  {
    name: "ActionType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Attachment",
    embedded: false
  },
  {
    name: "Timeline",
    embedded: false
  },
  {
    name: "Action",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://prisma:4466`
});
export const prisma = new Prisma();
